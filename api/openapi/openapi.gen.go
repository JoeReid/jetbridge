// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Binding defines model for Binding.
type Binding struct {
	// AssignedPeer The ID of the peer to which the binding is currently assigned
	AssignedPeer *openapi_types.UUID `json:"assignedPeer,omitempty"`
	Batching     *BindingBatching    `json:"batching,omitempty"`

	// Id The unique ID of the binding
	Id openapi_types.UUID `json:"id"`

	// LambdaARN The Amazon Resource Name of the lambda
	LambdaARN string `json:"lambdaARN"`

	// NatsConsumer The NATS consumer to which the lambda is bound
	NatsConsumer string `json:"natsConsumer"`

	// NatsStream The NATS stream to which the lambda is bound
	NatsStream string `json:"natsStream"`
}

// BindingBatching defines model for BindingBatching.
type BindingBatching struct {
	// MaxLatency The maximum amount of time to hold unprocessed messages before invoking the lambda
	MaxLatency string `json:"maxLatency"`

	// MaxMessages The maximum number of messages the lambda can be invoked with
	MaxMessages int `json:"maxMessages"`
}

// CreateBinding defines model for CreateBinding.
type CreateBinding struct {
	Batching *BindingBatching `json:"batching,omitempty"`

	// LambdaARN The Amazon Resource Name of the lambda to bind
	LambdaARN string `json:"lambdaARN"`

	// NatsStream The nats stream to bind the lambda to
	NatsStream string `json:"natsStream"`
}

// Peer defines model for Peer.
type Peer struct {
	// Expired True if the peer is considered expired, but the record has not yet been removed
	Expired bool `json:"expired"`

	// HeartbeatDueBy The time the peer will be considered offline if no heartbeat is received
	HeartbeatDueBy time.Time `json:"heartbeatDueBy"`

	// Hostname The peer's hostname
	Hostname string `json:"hostname"`

	// Id The peer's ID
	Id openapi_types.UUID `json:"id"`

	// JoinedAt The time the peer joined the cluster
	JoinedAt time.Time `json:"joinedAt"`

	// LastSeenAt The time the peer was last seen
	LastSeenAt time.Time `json:"lastSeenAt"`
}

// RFC7807 defines model for RFC7807.
type RFC7807 struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Status The HTTP status code.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. The title does not change from occurrence to occurrence of the problem.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem. The URI provides human-readable documentation for the problem type.
	Type string `json:"type"`
}

// CreateBindingJSONRequestBody defines body for CreateBinding for application/json ContentType.
type CreateBindingJSONRequestBody = CreateBinding

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListBindings request
	ListBindings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBinding request with any body
	CreateBindingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBinding(ctx context.Context, body CreateBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBinding request
	DeleteBinding(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBinding request
	GetBinding(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPeers request
	ListPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeer request
	GetPeer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListBindings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBindingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBindingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBinding(ctx context.Context, body CreateBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBindingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBinding(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBindingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBinding(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBindingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListBindingsRequest generates requests for ListBindings
func NewListBindingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/bindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBindingRequest calls the generic CreateBinding builder with application/json body
func NewCreateBindingRequest(server string, body CreateBindingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBindingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBindingRequestWithBody generates requests for CreateBinding with any type of body
func NewCreateBindingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/bindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBindingRequest generates requests for DeleteBinding
func NewDeleteBindingRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBindingRequest generates requests for GetBinding
func NewGetBindingRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPeersRequest generates requests for ListPeers
func NewListPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeerRequest generates requests for GetPeer
func NewGetPeerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v0/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListBindings request
	ListBindingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBindingsResponse, error)

	// CreateBinding request with any body
	CreateBindingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindingResponse, error)

	CreateBindingWithResponse(ctx context.Context, body CreateBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindingResponse, error)

	// DeleteBinding request
	DeleteBindingWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBindingResponse, error)

	// GetBinding request
	GetBindingWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBindingResponse, error)

	// ListPeers request
	ListPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPeersResponse, error)

	// GetPeer request
	GetPeerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPeerResponse, error)
}

type ListBindingsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]Binding
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r ListBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBindingResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Binding
	JSON201                   *Binding
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r CreateBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBindingResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *RFC7807
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r DeleteBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBindingResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Binding
	ApplicationproblemJSON404 *RFC7807
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r GetBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPeersResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]Peer
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r ListPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeerResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Peer
	ApplicationproblemJSON404 *RFC7807
	ApplicationproblemJSON500 *RFC7807
}

// Status returns HTTPResponse.Status
func (r GetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListBindingsWithResponse request returning *ListBindingsResponse
func (c *ClientWithResponses) ListBindingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBindingsResponse, error) {
	rsp, err := c.ListBindings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBindingsResponse(rsp)
}

// CreateBindingWithBodyWithResponse request with arbitrary body returning *CreateBindingResponse
func (c *ClientWithResponses) CreateBindingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBindingResponse, error) {
	rsp, err := c.CreateBindingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindingResponse(rsp)
}

func (c *ClientWithResponses) CreateBindingWithResponse(ctx context.Context, body CreateBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBindingResponse, error) {
	rsp, err := c.CreateBinding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBindingResponse(rsp)
}

// DeleteBindingWithResponse request returning *DeleteBindingResponse
func (c *ClientWithResponses) DeleteBindingWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteBindingResponse, error) {
	rsp, err := c.DeleteBinding(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBindingResponse(rsp)
}

// GetBindingWithResponse request returning *GetBindingResponse
func (c *ClientWithResponses) GetBindingWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetBindingResponse, error) {
	rsp, err := c.GetBinding(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBindingResponse(rsp)
}

// ListPeersWithResponse request returning *ListPeersResponse
func (c *ClientWithResponses) ListPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListPeersResponse, error) {
	rsp, err := c.ListPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPeersResponse(rsp)
}

// GetPeerWithResponse request returning *GetPeerResponse
func (c *ClientWithResponses) GetPeerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPeerResponse, error) {
	rsp, err := c.GetPeer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeerResponse(rsp)
}

// ParseListBindingsResponse parses an HTTP response from a ListBindingsWithResponse call
func ParseListBindingsResponse(rsp *http.Response) (*ListBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Binding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateBindingResponse parses an HTTP response from a CreateBindingWithResponse call
func ParseCreateBindingResponse(rsp *http.Response) (*CreateBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Binding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Binding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteBindingResponse parses an HTTP response from a DeleteBindingWithResponse call
func ParseDeleteBindingResponse(rsp *http.Response) (*DeleteBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetBindingResponse parses an HTTP response from a GetBindingWithResponse call
func ParseGetBindingResponse(rsp *http.Response) (*GetBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Binding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListPeersResponse parses an HTTP response from a ListPeersWithResponse call
func ParseListPeersResponse(rsp *http.Response) (*ListPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPeerResponse parses an HTTP response from a GetPeerWithResponse call
func ParseGetPeerResponse(rsp *http.Response) (*GetPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RFC7807
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List bindings
	// (GET /v0/bindings)
	ListBindings(w http.ResponseWriter, r *http.Request)
	// Create binding
	// (POST /v0/bindings)
	CreateBinding(w http.ResponseWriter, r *http.Request)
	// Delete binding
	// (DELETE /v0/bindings/{id})
	DeleteBinding(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get binding
	// (GET /v0/bindings/{id})
	GetBinding(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List peers
	// (GET /v0/peers)
	ListPeers(w http.ResponseWriter, r *http.Request)
	// Get peer
	// (GET /v0/peers/{id})
	GetPeer(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBindings operation middleware
func (siw *ServerInterfaceWrapper) ListBindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBindings(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBinding operation middleware
func (siw *ServerInterfaceWrapper) CreateBinding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBinding(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBinding operation middleware
func (siw *ServerInterfaceWrapper) DeleteBinding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBinding(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBinding operation middleware
func (siw *ServerInterfaceWrapper) GetBinding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBinding(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPeers operation middleware
func (siw *ServerInterfaceWrapper) ListPeers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPeers(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPeer operation middleware
func (siw *ServerInterfaceWrapper) GetPeer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPeer(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/bindings", wrapper.ListBindings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v0/bindings", wrapper.CreateBinding)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v0/bindings/{id}", wrapper.DeleteBinding)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/bindings/{id}", wrapper.GetBinding)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/peers", wrapper.ListPeers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v0/peers/{id}", wrapper.GetPeer)
	})

	return r
}

type InternalServerErrorJSONResponse RFC7807

type NotFoundJSONResponse RFC7807

type ListBindingsRequestObject struct {
}

type ListBindingsResponseObject interface {
	VisitListBindingsResponse(w http.ResponseWriter) error
}

type ListBindings200JSONResponse []Binding

func (response ListBindings200JSONResponse) VisitListBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListBindings500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListBindings500JSONResponse) VisitListBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateBindingRequestObject struct {
	Body *CreateBindingJSONRequestBody
}

type CreateBindingResponseObject interface {
	VisitCreateBindingResponse(w http.ResponseWriter) error
}

type CreateBinding200JSONResponse Binding

func (response CreateBinding200JSONResponse) VisitCreateBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateBinding201JSONResponse Binding

func (response CreateBinding201JSONResponse) VisitCreateBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateBinding500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateBinding500JSONResponse) VisitCreateBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBindingRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteBindingResponseObject interface {
	VisitDeleteBindingResponse(w http.ResponseWriter) error
}

type DeleteBinding204Response struct {
}

func (response DeleteBinding204Response) VisitDeleteBindingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteBinding404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteBinding404JSONResponse) VisitDeleteBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBinding500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteBinding500JSONResponse) VisitDeleteBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBindingRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetBindingResponseObject interface {
	VisitGetBindingResponse(w http.ResponseWriter) error
}

type GetBinding200JSONResponse Binding

func (response GetBinding200JSONResponse) VisitGetBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBinding404JSONResponse struct{ NotFoundJSONResponse }

func (response GetBinding404JSONResponse) VisitGetBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetBinding500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetBinding500JSONResponse) VisitGetBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPeersRequestObject struct {
}

type ListPeersResponseObject interface {
	VisitListPeersResponse(w http.ResponseWriter) error
}

type ListPeers200JSONResponse []Peer

func (response ListPeers200JSONResponse) VisitListPeersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPeers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListPeers500JSONResponse) VisitListPeersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPeerRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetPeerResponseObject interface {
	VisitGetPeerResponse(w http.ResponseWriter) error
}

type GetPeer200JSONResponse Peer

func (response GetPeer200JSONResponse) VisitGetPeerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPeer404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPeer404JSONResponse) VisitGetPeerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPeer500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPeer500JSONResponse) VisitGetPeerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List bindings
	// (GET /v0/bindings)
	ListBindings(ctx context.Context, request ListBindingsRequestObject) (ListBindingsResponseObject, error)
	// Create binding
	// (POST /v0/bindings)
	CreateBinding(ctx context.Context, request CreateBindingRequestObject) (CreateBindingResponseObject, error)
	// Delete binding
	// (DELETE /v0/bindings/{id})
	DeleteBinding(ctx context.Context, request DeleteBindingRequestObject) (DeleteBindingResponseObject, error)
	// Get binding
	// (GET /v0/bindings/{id})
	GetBinding(ctx context.Context, request GetBindingRequestObject) (GetBindingResponseObject, error)
	// List peers
	// (GET /v0/peers)
	ListPeers(ctx context.Context, request ListPeersRequestObject) (ListPeersResponseObject, error)
	// Get peer
	// (GET /v0/peers/{id})
	GetPeer(ctx context.Context, request GetPeerRequestObject) (GetPeerResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListBindings operation middleware
func (sh *strictHandler) ListBindings(w http.ResponseWriter, r *http.Request) {
	var request ListBindingsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListBindings(ctx, request.(ListBindingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListBindings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListBindingsResponseObject); ok {
		if err := validResponse.VisitListBindingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateBinding operation middleware
func (sh *strictHandler) CreateBinding(w http.ResponseWriter, r *http.Request) {
	var request CreateBindingRequestObject

	var body CreateBindingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBinding(ctx, request.(CreateBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBinding")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateBindingResponseObject); ok {
		if err := validResponse.VisitCreateBindingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteBinding operation middleware
func (sh *strictHandler) DeleteBinding(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteBindingRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBinding(ctx, request.(DeleteBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBinding")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteBindingResponseObject); ok {
		if err := validResponse.VisitDeleteBindingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetBinding operation middleware
func (sh *strictHandler) GetBinding(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetBindingRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBinding(ctx, request.(GetBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBinding")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBindingResponseObject); ok {
		if err := validResponse.VisitGetBindingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListPeers operation middleware
func (sh *strictHandler) ListPeers(w http.ResponseWriter, r *http.Request) {
	var request ListPeersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPeers(ctx, request.(ListPeersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPeers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPeersResponseObject); ok {
		if err := validResponse.VisitListPeersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetPeer operation middleware
func (sh *strictHandler) GetPeer(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetPeerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPeer(ctx, request.(GetPeerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPeer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPeerResponseObject); ok {
		if err := validResponse.VisitGetPeerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
