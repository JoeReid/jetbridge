openapi: 3.0.0
info:
  title: JetBridge API
  description: Restful API for managing a JetBridge cluster
  version: 0.1.0
servers:
  - url: http://localhost:8000/api
    description: Local server
security:
  - {}
tags:
  - name: Management
    description: Endpoints for managing the JetBridge cluster
  - name: Bindings
    description: Endpoints for creating and managing Jetstream/Lambda bindings
paths:
  /v0/peers:
    get:
      operationId: listPeers
      summary: List peers
      description: Retreive the current list of peers
      tags:
        - Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v0/peers/{id}:
    get:
      operationId: getPeer
      summary: Get peer
      description: Retreive a peer by ID
      tags:
        - Management
      parameters:
        - name: id
          in: path
          description: The ID of the peer to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peer'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v0/bindings:
    post:
      operationId: createBinding
      summary: Create binding
      description: Create a new binding
      tags:
        - Bindings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBinding'
      responses:
        '200':
          description: OK, returned when a binding with exactly the same properties already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Binding'
        '201':
          description: Created, returned when a new binding is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Binding'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: listBindings
      summary: List bindings
      description: Retreive the current list of bindings
      tags:
        - Bindings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Binding'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v0/bindings/{id}:
    get:
      operationId: getBinding
      summary: Get binding
      description: Retreive a binding
      tags:
        - Bindings
      parameters:
        - name: id
          in: path
          description: The ID of the binding to retreive
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Binding'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteBinding
      summary: Delete binding
      description: Delete a binding
      tags:
        - Bindings
      parameters:
        - name: id
          in: path
          description: The ID of the binding to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content, returned when the binding is deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Peer:
      type: object
      required:
        - id
        - hostname
        - joinedAt
        - lastSeenAt
        - heartbeatDueBy
        - expired
      properties:
        id:
          type: string
          format: uuid
          description: The peer's ID
        hostname:
          type: string
          description: The peer's hostname
          example: i-0123456789abcdef.us-west-2.compute.internal
        joinedAt:
          type: string
          format: date-time
          description: The time the peer joined the cluster
        lastSeenAt:
          type: string
          format: date-time
          description: The time the peer was last seen
        heartbeatDueBy:
          type: string
          format: date-time
          description: The time the peer will be considered offline if no heartbeat is received
        expired:
          type: boolean
          description: True if the peer is considered expired, but the record has not yet been removed
          example: false
    RFC7807:
      type: object
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          format: uri
          description: |
            A URI reference that identifies the problem. The URI provides human-readable documentation for the problem type.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type. The title does not change from occurrence to occurrence of the problem.
        status:
          type: integer
          description: |
            The HTTP status code.
        detail:
          type: string
          description: |
            A human-readable explanation specific to this occurrence of the problem.
    BindingBatching:
      type: object
      required:
        - maxMessages
        - maxLatency
      properties:
        maxMessages:
          type: integer
          description: The maximum number of messages the lambda can be invoked with
        maxLatency:
          type: string
          format: duration
          description: The maximum amount of time to hold unprocessed messages before invoking the lambda
    Binding:
      type: object
      required:
        - id
        - natsStream
        - natsConsumer
        - lambdaARN
      properties:
        id:
          type: string
          format: uuid
          description: The unique ID of the binding
        assignedPeer:
          type: string
          format: uuid
          description: The ID of the peer to which the binding is currently assigned
        natsStream:
          type: string
          description: The NATS stream to which the lambda is bound
        natsConsumer:
          type: string
          description: The NATS consumer to which the lambda is bound
        lambdaARN:
          type: string
          description: The Amazon Resource Name of the lambda
        batching:
          $ref: '#/components/schemas/BindingBatching'
    CreateBinding:
      type: object
      required:
        - natsStream
        - lambdaARN
      properties:
        natsStream:
          type: string
          description: The nats stream to bind the lambda to
        lambdaARN:
          type: string
          description: The Amazon Resource Name of the lambda to bind
        batching:
          $ref: '#/components/schemas/BindingBatching'
  responses:
    InternalServerError:
      description: The server encountered an unexpected condition that prevented it from fulfilling the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/RFC7807'
    NotFound:
      description: The requested resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/RFC7807'
