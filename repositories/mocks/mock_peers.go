// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JoeReid/jetbridge/repositories (interfaces: Peers)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repositories "github.com/JoeReid/jetbridge/repositories"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPeers is a mock of Peers interface.
type MockPeers struct {
	ctrl     *gomock.Controller
	recorder *MockPeersMockRecorder
}

// MockPeersMockRecorder is the mock recorder for MockPeers.
type MockPeersMockRecorder struct {
	mock *MockPeers
}

// NewMockPeers creates a new mock instance.
func NewMockPeers(ctrl *gomock.Controller) *MockPeers {
	mock := &MockPeers{ctrl: ctrl}
	mock.recorder = &MockPeersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeers) EXPECT() *MockPeersMockRecorder {
	return m.recorder
}

// JoinPeers mocks base method.
func (m *MockPeers) JoinPeers(arg0 context.Context) (*repositories.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPeers", arg0)
	ret0, _ := ret[0].(*repositories.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPeers indicates an expected call of JoinPeers.
func (mr *MockPeersMockRecorder) JoinPeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPeers", reflect.TypeOf((*MockPeers)(nil).JoinPeers), arg0)
}

// LeavePeers mocks base method.
func (m *MockPeers) LeavePeers(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeavePeers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeavePeers indicates an expected call of LeavePeers.
func (mr *MockPeersMockRecorder) LeavePeers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeavePeers", reflect.TypeOf((*MockPeers)(nil).LeavePeers), arg0, arg1)
}

// ListPeers mocks base method.
func (m *MockPeers) ListPeers(arg0 context.Context) ([]repositories.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPeers", arg0)
	ret0, _ := ret[0].([]repositories.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPeers indicates an expected call of ListPeers.
func (mr *MockPeersMockRecorder) ListPeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeers", reflect.TypeOf((*MockPeers)(nil).ListPeers), arg0)
}

// SendHeartbeat mocks base method.
func (m *MockPeers) SendHeartbeat(arg0 context.Context, arg1 uuid.UUID) (*repositories.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeartbeat", arg0, arg1)
	ret0, _ := ret[0].(*repositories.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendHeartbeat indicates an expected call of SendHeartbeat.
func (mr *MockPeersMockRecorder) SendHeartbeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeartbeat", reflect.TypeOf((*MockPeers)(nil).SendHeartbeat), arg0, arg1)
}
